<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structure on Sun Xichen&#39;s site</title>
    <link>https://sunxichen.github.io/tags/data-structure/</link>
    <description>Recent content in Data Structure on Sun Xichen&#39;s site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 30 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sunxichen.github.io/tags/data-structure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Searching</title>
      <link>https://sunxichen.github.io/posts/searching/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sunxichen.github.io/posts/searching/</guid>
      <description>前言 我们用术语Symbol Table来描述我们可以通过specifying a key 来获得我们想要存储的信息(value)的一种抽象机制。
Symbol tables有时又可以称作dictionaries,也可以被称作indices. 我们将在Searching的应用一节中更深入得讨论两者。有三种典型的数据结构可以实现高效地symbol tables: Binary search trees, Red-Black trees, and hash tables.
Definition: A symbol table is a data structure for key-value pairs that supports two operations:insert(put) a new pair into the table and search for (get) the value associated with a given key.
API
对于实现symbol tables我们接受下面的实现准则，来使我们的代码连续，精炼且有效:
Generics. 对于symbol tables，我们强调key和value扮演的不同角色。在搜索中，我们准确地区分key和value的类型。而不是像在Priority queue中，将keys隐含得表达在item中。其中我们还将考虑keys是Comparable(Sorting中介绍的Interface)的拓展情形。
Duplicate keys.
 每个key只有一个value与之对应（table中没有重复的keys) 当client向表中put(insert)一对已经存在的key-value对时，(key已经存在)，新的value将取代旧的那一个。  Null keys.Keys must not be null.</description>
    </item>
    
    <item>
      <title>Sorting</title>
      <link>https://sunxichen.github.io/posts/sorting/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sunxichen.github.io/posts/sorting/</guid>
      <description>Sorting cost model
在研究排序算法时，我们计算compares 和 exchanges的次数。对于那些没有exchanges的排序算法，我们统计array accesses.
 Selection sort public class Selection{ public static void sort(Comparable[] a){ int N = a.length for(int i=0;i&amp;lt;N;i++){ int min = i; for(int j = i+1; j&amp;lt;N;j++){ if(less(a[j],a[i])) min = j; exch(a, i, min); } } } } 算法思想： 首先，找到数组中最小的item, 然后让他与数组第一个元素交换。接下来，找到下一个最小的item然后让它与第二个元素交换……
Selection sort 并没有利用数组的原始order. 他没有有关下次排序时最小item可能的位置的信息。所以一个任意顺序的数组与一个已经排好序的或者一个item全部相等的数组在用selection sort时的performance相同。但是selection sort 的exchange (data movement)是linear的。这是其他sort算法所没有的。
Insertion sort public class Insertion{ public static void sort(Comparable[] a){ int N = a.</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://sunxichen.github.io/posts/test/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sunxichen.github.io/posts/test/</guid>
      <description>Test</description>
    </item>
    
    <item>
      <title>栈序列可生成性问题</title>
      <link>https://sunxichen.github.io/posts/%E6%A0%88%E5%BA%8F%E5%88%97%E5%8F%AF%E7%94%9F%E6%88%90%E8%A1%8C%E6%80%A7%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sunxichen.github.io/posts/%E6%A0%88%E5%BA%8F%E5%88%97%E5%8F%AF%E7%94%9F%E6%88%90%E8%A1%8C%E6%80%A7%E9%97%AE%E9%A2%98/</guid>
      <description>假定某client按照一系列混合操作栈的push,pop操作。push将0~9按照顺序push.判断一下哪些序列不会出现？
a. 4 3 2 1 0 9 8 7 6 5 b. 4 6 9 7 5 3 2 9 0 1 c. 2 6 8 7 5 3 2 9 0 1 d. 4 3 2 1 0 5 6 7 8 9 e. 1 2 3 4 5 6 9 8 7 0 f. 0 4 6 5 3 8 1 7 2 9 g. 1 4 7 9 8 6 5 3 0 2 h.</description>
    </item>
    
  </channel>
</rss>